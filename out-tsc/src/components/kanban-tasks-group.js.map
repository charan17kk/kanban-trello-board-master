{"version":3,"file":"kanban-tasks-group.js","sourceRoot":"","sources":["../../../src/components/kanban-tasks-group.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC7E,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,oBAAoB,EAAE,MAAM,WAAW,CAAC;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAIrF,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,OAAO,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC;IAcpD,MAAM,KAAK,MAAM;QACf,OAAO;YACL,SAAS;YACT,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAkGA;SAAC,CAAC;IACT,CAAC;IAED,SAAS,CAAC,KAAU;QAClB,KAAK,CAAC,cAAc,EAAE,CAAC;IACzB,CAAC;IAED,WAAW,CAAC,KAAU;QACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,IAAI,WAAW,GAAa,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/F,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,UAAU,CAAC,EAAO;QAChB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QACf,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,mBAAmB,CAAC,CAAM;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC,aAAa,EAAE,CAAC;IAC1D,CAAC;IAED,gBAAgB,CAAC,CAAM;QACrB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC,aAAa,EAAE,CAAC;IAC1D,CAAC;IAED,gBAAgB,CAAC,CAAM,EAAE,IAAY;QACnC,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,YAAY;QACZ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED,OAAO,CAAC,CAAM;QACZ,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAG,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YAC3D,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAClF,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC,aAAa,EAAE,CAAC;SACzD;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;kCACmB,IAAI,CAAC,UAAU,cAAc,IAAI,CAAC,SAAS;qCACxC,IAAI,CAAC,QAAQ,CAAC,KAAK;;gBAExC,IAAI,CAAC,aAAa;YACd,CAAC,CAAC,IAAI,CAAA;;;uDAG6B,IAAI,CAAC,WAAW,CAAC,OAAO,aAAa,CAAC,CAAM,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,SAAS,CAAC;;;qDAGtF,IAAI,CAAC,WAAW,CAAC,WAAW,aAAa,CAAC,CAAM,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,aAAa,CAAC;;2CAEtG,IAAI,CAAC,gBAAgB;;;;;2CAKrB,IAAI,CAAC,OAAO;;;;;;;uBAOhC;YACH,CAAC,CAAC,IAAI;gBACV,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3D,OAAO,IAAI,CAAA;mCACQ,CAAC,QAAQ,IAAI,CAAC,EAAE,4BAA4B,IAAI,eAAe,IAAI,CAAC,WAAW;+CACnE,IAAI,CAAC,OAAO;qDACN,IAAI,CAAC,WAAW;;uBAE9C,CAAA;QACP,CAAC,CAAC;;cAEJ,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;+BACf,IAAI,CAAC,mBAAmB;aAC1C;;OAEN,CAAC;IACN,CAAC;IACD,OAAO,CAAC,iBAAsB;QAC5B,IAAG,iBAAiB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAC;YACxC,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;IACH,CAAC;IACD,YAAY,CAAC,KAAU;QACrB,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAC1B,MAAM,EACJ,aAAa,EACb,MAAM,EACP,GAAG,OAAO,CAAC;QACZ,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChE,CAAC;CACF,CAAA;AAtNC;IADC,QAAQ,EAAE;wCACS;AAEpB;IADC,QAAQ,EAAE;6CACa;AAExB;IADC,QAAQ,EAAE;2CACY;AAEvB;IADC,QAAQ,EAAE;6CACY;AAEvB;IADC,QAAQ,EAAE;wCACO;AAElB;IADC,QAAQ,EAAE;sCACmB;AAZnB,MAAM;IADlB,aAAa,CAAC,oBAAoB,CAAC;GACvB,MAAM,CAwNlB;SAxNY,MAAM","sourcesContent":["import { BoardsData, TaskData, TaskList } from 'kanban-board-types';\nimport { LitElement, html, css, property, customElement } from 'lit-element';\nimport { connect } from 'pwa-helpers';\nimport { PageDataStateFactory } from '../models';\nimport { store } from '../store';\nimport defaulCss from '../styles';\nimport { addBoardTask, dropDraggedTask, storeDraggedTask } from '../actions/actions';\n\n\n@customElement('kanban-tasks-group')\nexport class Header extends connect(store)(LitElement) {\n  @property()\n  taskData!: TaskList;\n  @property()\n  addTaskStatus!: Boolean;\n  @property()\n  newTaskData!: TaskData;\n  @property()\n  selectedBoard!: string;\n  @property()\n  taskType!: string;\n  @property()\n  boards!: Map<any, BoardsData>;\n\n  static get styles() {\n    return [\n      defaulCss,\n      css`\n      .list {\n        width: 300px;\n        height: calc(100vh- 10px - 17px);\n      }\n      .list > * {\n        background-color: #e2e4e6;\n        color: #333;\n        padding: 0 10px;\n      }\n      .list .task-header {\n        line-height: 36px;\n        font-size: 16px;\n        font-weight: bold;\n        border-top-left-radius: 5px;\n        border-top-right-radius: 5px;\n      }\n      .list .add-task-btn {\n        line-height: 36px;\n        border-bottom-left-radius: 5px;\n        border-bottom-right-radius: 5px;\n        color: #888;\n        display: block;\n        background-color: #fff;\n        box-shadow: rgb(0 0 0 / 10%) 0px 1px 1px;\n        width: 92%;\n        border: none;\n        margin: 0 auto;\n        margin-bottom: 10px;\n        cursor: pointer;\n      }\n      .list .tasksList {\n        list-style: none;\n        margin: 0;\n        max-height: calc(100vh - 136px - 36px);\n        overflow-y: auto;\n      }\n      .list .tasksList .task {\n        color: #333;\n        background-color: #fff;\n        padding: 10px;\n        border-radius: 3px;\n        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);\n        margin-bottom: 10px;\n        cursor: move;\n      }\n      .list .tasksList .task .title{\n        font-weight: 600;\n        line-height: 36px;\n        border-bottom: 1px solid #ccc;\n      }\n      .list .tasksList .task input {\n        width: 95%;\n        border: 1px solid #ccc;\n        font-size: 12px;\n        line-height: 20px;\n        height: 20px;\n        border-radius: 5px;\n        padding-left: 8px;\n      }\n      .list .tasksList .task .actions {\n        text-align: right;\n        padding-top: 8px;\n      }\n      .list .tasksList .task .actions button{\n        border: 0;\n        width: 60px;\n        position: relative;\n        height: 28px;\n        cursor: pointer;\n        transition: all 0.3s;\n        border-radius: 3px;\n      }\n      .list .tasksList .task .actions button.add-task-submit{\n        background-color: #2a9d8f;\n        border: 1px solid #2a9d8f;\n      }\n      .list .tasksList .task .actions button.close-task-submit{\n        background-color: #e76f51;\n        border: 1px solid #e76f51;\n      }\n      .list .tasksList .task .actions button:hover{\n        background-color: #fff;\n      }\n      .list .tasksList .task .actions button svg{\n        width: 12px;\n        position: absolute;\n        transform: translate(-50%, -50%);\n        top: 50%;\n        left: 50%;\n        fill: #fff;\n      }\n      .list .tasksList .task .actions button:hover svg{\n        fill: #000;\n      }\n      .list .tasksList .task .description{\n        margin-top: 8px\n      }\n        `];\n  }\n\n  allowDrop(event: any) {\n    event.preventDefault();\n  }\n\n  onDragStart(event: any) {\n    console.log(event)\n    let draggedTask: TaskData = this.taskData.tasks.filter(item => item.id === event.target.id)[0];\n    store.dispatch(storeDraggedTask(this.selectedBoard, this.taskType, draggedTask));\n  }\n  \n  onDropStop(ev: any) {\n    console.log(ev)\n    store.dispatch(dropDraggedTask(this.selectedBoard, this.taskType));\n  }\n\n  addTaskStatusChange(e: any) {\n    this.addTaskStatus = true;\n    this.newTaskData = PageDataStateFactory.buildtaskData();\n  }\n\n  closeAddTaskData(e: any) {\n    this.addTaskStatus = false;\n    this.newTaskData = PageDataStateFactory.buildtaskData();\n  }\n\n  onChangeTaskData(e: any, type: string) {\n    e.preventDefault();\n    //@ts-ignore\n    this.newTaskData[type] = e.target.value;\n  }\n\n  addTask(e: any) {\n    e.preventDefault();\n    if(this.newTaskData.heading && this.newTaskData.description) {\n      store.dispatch(addBoardTask(this.selectedBoard, this.taskType, this.newTaskData));\n      this.addTaskStatus = false;\n      this.newTaskData = PageDataStateFactory.buildtaskData();\n    }\n  }\n\n  render() {\n    return html`\n        <div class=\"list\" @drop=${this.onDropStop} @dragover=${this.allowDrop}>\n          <div class=\"task-header\">${this.taskData.title}</div>\n            <div class=\"tasksList\">\n              ${this.addTaskStatus\n                    ? html`\n                      <div class=\"task\" draggable=\"false\">\n                        <div class=\"title\">\n                          <input type=\"text\" .value=\"${this.newTaskData.heading}\" @change=${(e: any) => this.onChangeTaskData(e, 'heading')} placeholder=\"Enter Title\" />\n                        </div>\n                        <div class=\"description\">\n                        <input type=\"text\" .value=\"${this.newTaskData.description}\" @change=${(e: any) => this.onChangeTaskData(e, 'description')} placeholder=\"Enter Description\" /></div>\n                        <div class=\"actions\">\n                          <button @click=${this.closeAddTaskData} class=\"close-task-submit\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                              <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n                            </svg>\n                          </button>\n                          <button @click=${this.addTask}\" class=\"add-task-submit\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"  fill=\"currentColor\" class=\"bi bi-check-lg\" viewBox=\"0 0 16 16\">\n                              <path d=\"M13.485 1.431a1.473 1.473 0 0 1 2.104 2.062l-7.84 9.801a1.473 1.473 0 0 1-2.12.04L.431 8.138a1.473 1.473 0 0 1 2.084-2.083l4.111 4.112 6.82-8.69a.486.486 0 0 1 .04-.045z\"/>\n                            </svg>\n                          </button>\n                        </div>\n                      </div>\n                      `\n                    : null}\n              ${this.taskData.tasks && this.taskData.tasks.map((task, i) => {\n                return html`\n                        <div key=${i} id=\"${task.id}\" class=\"task\" draggable=${true} @dragstart=${this.onDragStart}>\n                          <div class=\"title\">${task.heading}</div>\n                          <div class=\"description\">${task.description}</div>\n                        </div>\n                      `\n                })}\n            </div>\n            ${this.addTaskStatus ? null : html`\n              <button @click=${this.addTaskStatusChange} class=\"add-task-btn\">Add a card...</button>\n            `}\n        </div>\n      `;\n  }\n  updated(changedProperties: any) {\n    if(changedProperties.has('selectedBoard')){\n      this.performUpdate();\n    }\n  }\n  stateChanged(state: any) {\n    const { reducer } = state;\n    const {\n      selectedBoard,\n      boards\n    } = reducer;\n    this.selectedBoard = selectedBoard;\n    this.boards = boards;\n    this.taskData = boards.get(this.selectedBoard)[this.taskType];\n  }\n}"]}